pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TestHelper is Test {
    address public permit2Address = 0x000000000022D473030F116dDEE9F6B43aC78BA3;
    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address public tokenHolder = 0xCDA20F2C2256b3982686a7BBeB7648804409a060;

    address[] public whitelistedTargetsBNB = [
        0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7,
        0x10ED43C718714eb63d5aA57B78B54704E256024E,
        0x13f4EA83D0bd40E75C8222255bc855a974568Dd4,
        0xF29acE1FE5f36389d0dDe450a0195A30c3770245,
        0x6352a56caadC4F1E25CD6c75970Fa768A3304e64,
        0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897,
        0x19609B03C976CCA288fbDae5c21d4290e9a4aDD7,
        0xC9a0F685F39d05D835c369036251ee3aEaaF3c47,
        0x13147820401f455e3318db8686958D457ad2E7b0,
        0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8,
        0x8317c460C22A9958c27b4B6403b98d2Ef4E2ad32,
        0xD2F4e803757ceE9257a0111953c92976E353Dcb1
    ];

    address public verifyierPoolDeployerBNB =
        0x41ff9AA7e16B8B1a8a8dc4f0eFacd93D02d071c9;

    address[] public customFeeRoutersBNB = [
        0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8
    ]; // MeerkatRouter, BiSwap

    address[] public routersV3BNB = [
        0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897,
        0x13f4EA83D0bd40E75C8222255bc855a974568Dd4,
        0xD8bCE9db54bf66D298BFB5BB194CB72Fe0291561,
        0xD2F4e803757ceE9257a0111953c92976E353Dcb1
    ];
    address[] public factoryDeployerVerifiyeraBNB = [
        0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865,
        /* Algebra Factory */ 0x306F06C147f064A010530292A1EB6737c3e378e4
    ];

    address[] public BNBFactories = [
        0x4693B62E5fc9c0a45F89D62e6300a03C85f43137,
        0x858E3312ed3A876947EA49d572A7C42DE08af7EE,
        0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73,
        0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6,
        0xc35DADB65012eC5796536bD9864eD8773aBc74C4,
        0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7,
        0x0BFbCF9fa4f9C56B0F40a671Ad40E0805A091865,
        0x7Bc382DdC5928964D7af60e7e2f6299A1eA6F48d,
        0x306F06C147f064A010530292A1EB6737c3e378e4,
        0x738B815eaDD06E0041b52B0C9d4F0d0D277B24bA
    ];

    address public userCallTarget = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;

    address[] public verifyierPoolDeployersBNB = [
        0x41ff9AA7e16B8B1a8a8dc4f0eFacd93D02d071c9,
        /* AlgebraDeployer */ 0xc89F69Baa3ff17a842AB2DE89E5Fc8a8e2cc7358
    ];
    address[] public limitedAccessRoutersBNB = [
        0xC9a0F685F39d05D835c369036251ee3aEaaF3c47
    ]; // Babydoge

    IERC20 public constant CAKE_TOKEN =
        IERC20(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);

    bytes userTargetData =
        hex"5ae401dc0000000000000000000000000000000000000000000000000000000064a40aab00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104472b43f30000000000000000000000000000000000000000000000013ee7364e365689a4000000000000000000000000000000000000000000000001bde39821a30507040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000cda20f2c2256b3982686a7bbeb7648804409a06000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000090c97f71e18723b0cf0dfa30ee176ab653e89f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104472b43f30000000000000000000000000000000000000000000000004fb9cd938d95a269000000000000000000000000000000000000000000000000715b387f4d39e0bc0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000cda20f2c2256b3982686a7bbeb7648804409a06000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000090c97f71e18723b0cf0dfa30ee176ab653e89f4000000000000000000000000000000000000000000000000000000000";

    bytes userTargetDataMetaSwapperBeneficiary =
        hex"5ae401dc0000000000000000000000000000000000000000000000000000000064a40aab00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104472b43f30000000000000000000000000000000000000000000000013ee7364e365689a4000000000000000000000000000000000000000000000001bde39821a305070400000000000000000000000000000000000000000000000000000000000000800000000000000000000000008Ac5fA42d4D7BCE0262cfDB498bF5fe2580D7f5300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000090c97f71e18723b0cf0dfa30ee176ab653e89f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104472b43f30000000000000000000000000000000000000000000000004fb9cd938d95a269000000000000000000000000000000000000000000000000715b387f4d39e0bc00000000000000000000000000000000000000000000000000000000000000800000000000000000000000008Ac5fA42d4D7BCE0262cfDB498bF5fe2580D7f5300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000090c97f71e18723b0cf0dfa30ee176ab653e89f4000000000000000000000000000000000000000000000000000000000";

    bytes masterInput =
        hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000000000000000000000000000001bd8449afd17d300000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000172fcd41e0913e95784454622d1c3724f546f849000000000000000000000000e3826dae89e253539c84c3f6a4cfa63ce1e2ba47000000000000000000000000e3483797ddafda13c0c8283cb2456d4957bacd730000000000000000000000000f338ec12d3f7c3d77a4b9fcc1f95f3fb6ad0ea6000000000000000000000000000000000000000000000000000000000000000400000000000000000000000013f4ea83d0bd40e75c8222255bc855a974568dd40000000000000000000000005dc88340e1c5c6366864ee415d6034cadd1a989700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000005dc88340e1c5c6366864ee415d6034cadd1a98970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000016b9a82891338f9ba80e2d6970fdda79d1eb0dae";

    uint256 public wallchainPK = 11111;
    address public wallchainEOA = vm.addr(wallchainPK);

    uint256 public searcherPK = 22222;
    address public searcherEOA = vm.addr(searcherPK);

    uint256 public swapperPK = 22222;
    address public swapperEOA = vm.addr(swapperPK);

    // Fork stuff
    uint256 public forkNetwork;
    uint256 public constant BLOCK_START = 29667593;

    uint256 public msgSenderPK = 3333;
    address public msgSender = vm.addr(msgSenderPK);

    uint256 public prePayGasLimit = 11900;

    address[] originators;
}
